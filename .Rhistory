light = as.factor(light),
alternating = as.factor(alternating),
scarification = recode_factor(scarification, "none" = "Unscarified", "yes" = "Scarified"),
stratification = recode_factor(stratification, "none" = "Non-stratified", "yes" = "Stratified"),
light = recode_factor(light, "0" = "Darkness", "1" = "Light"),
alternating = recode_factor(alternating, "no" = "Constant temperature",
"yes" = "Alternating temperature"),
Experiment = paste(light, alternating, stratification, scarification, sep = ",\n"),
Experiment = as.factor(Experiment)) -> Germination
save(Germination, dat1, shapefile, world,coord_sf,dat1,taxa.file,habitat.file,
file = here::here("results", "appdata.RData"))
runApp('3. appCode.R')
functions <- list(mapplot = mapplot,
seedplot = seedplot,
references = references,
taxanomic = taxanomic,
habitat = habitat,
metanalize = metanalize)
saveRDS(functions, file = "results/functions.rds")
# load data for the app
load("results/appdata.RData")
functions <- readRDS("results/functions.rds")
mapplot <- functions$mapplot
seedplot<- functions$seedplot
references <- functions$references
taxanomic <- functions$taxanomic
habitat <- functions$habitat
metanalize <- functions$metanalize
runApp('3. appCode.R')
library(shiny); runApp('3. appCode.R')
# load data for the app
load("results/appdata.RData")
functions <- readRDS("results/functions.rds")
mapplot <- functions$mapplot
seedplot<- functions$seedplot
references <- functions$references
taxanomic <- functions$taxanomic
habitat <- functions$habitat
metanalize <- functions$metanalize
runApp('3. appCode.R')
# load data for the app
load("results/appdata.RData")
functions <- readRDS("results/functions.rds")
mapplot <- functions$mapplot
seedplot<- functions$seedplot
references <- functions$references
taxanomic <- functions$taxanomic
habitat <- functions$habitat
metanalize <- functions$metanalize
runApp('3. appCode.R')
#Load packages
library(dplyr); library(sp); library(readr); library(tidyr);library(metafor); library(binom); library(data.table); library(ggplot2); library(sf);
library(rsconnect)
#Load files for the app  ************#
#Load MedGermDB Germination File
dat1 <- read.csv("data/GerminationFile.csv")
#Load MedGermDB Taxa File
taxa.file = read.csv("data/TaxaFile.csv",header = TRUE, sep = ";", quote = "\"", stringsAsFactors = FALSE)
#Load MedGermDB Habitat File
habitat.file = read.csv("data/HabitatFile.csv",header = TRUE, sep = ",", quote = "\"", stringsAsFactors = FALSE)
# Load coordinates spacial data frame
#coord_sf <- st_read("data/coord_sf.shp")
coord_sf <- readRDS("data/coord_sf.rds")
# Load Germination grouped data
df <- fread("data/df.csv")
# Load map files
shapefile <- st_read("data/Map files/MedBasin_21-07-23.shp")
world  <- st_read("data/Map files/WorldRectMap.shp")
### A function to metanalize proportions:
metanalize <- function(d)
{
m <- rma.glmm(measure = "PLO", xi = seeds_germinated, ni = seeds_sown, data = d)
p <- predict(m, transf = transf.ilogit, digits = 3)
data.frame(mean = p$pred, lower = p$ci.lb, upper = p$ci.ub)
}
sa
#Load packages
library(dplyr); library(sp); library(readr); library(tidyr);library(metafor); library(binom); library(data.table); library(ggplot2); library(sf);
library(rsconnect)
#Load files for the app  ************#
#Load MedGermDB Germination File
dat1 <- read.csv("data/GerminationFile.csv")
#Load MedGermDB Taxa File
taxa.file = read.csv("data/TaxaFile.csv",header = TRUE, sep = ";", quote = "\"", stringsAsFactors = FALSE)
#Load MedGermDB Habitat File
habitat.file = read.csv("data/HabitatFile.csv",header = TRUE, sep = ",", quote = "\"", stringsAsFactors = FALSE)
# Load coordinates spacial data frame
#coord_sf <- st_read("data/coord_sf.shp")
coord_sf <- readRDS("data/coord_sf.rds")
# Load Germination grouped data
df <- fread("data/df.csv")
# Load map files
shapefile <- st_read("data/Map files/MedBasin_21-07-23.shp")
world  <- st_read("data/Map files/WorldRectMap.shp")
### A function to metanalize proportions:
metanalize <- function(d)
{
m <- rma.glmm(measure = "PLO", xi = seeds_germinated, ni = seeds_sown, data = d)
p <- predict(m, transf = transf.ilogit, digits = 3)
data.frame(mean = p$pred, lower = p$ci.lb, upper = p$ci.ub)
}
sa
#Load files for the app  ************#
#Load MedGermDB Germination File
dat1 <- read.csv("data/GerminationFile.csv")
#Load MedGermDB Taxa File
taxa.file = read.csv("data/TaxaFile.csv",header = TRUE, sep = ";", quote = "\"", stringsAsFactors = FALSE)
#Load MedGermDB Habitat File
habitat.file = read.csv("data/HabitatFile.csv",header = TRUE, sep = ",", quote = "\"", stringsAsFactors = FALSE)
# Load coordinates spacial data frame
#coord_sf <- st_read("data/coord_sf.shp")
coord_sf <- readRDS("data/coord_sf.rds")
# Load Germination grouped data
df <- fread("data/df.csv")
# Load map files
shapefile <- st_read("data/Map files/MedBasin_21-07-23.shp")
world  <- st_read("data/Map files/WorldRectMap.shp")
### A function to metanalize proportions:
metanalize <- function(d)
{
m <- rma.glmm(measure = "PLO", xi = seeds_germinated, ni = seeds_sown, data = d)
p <- predict(m, transf = transf.ilogit, digits = 3)
data.frame(mean = p$pred, lower = p$ci.lb, upper = p$ci.ub)
}
sa
#Load packages
library(dplyr); library(sp); library(readr); library(tidyr);library(metafor); library(binom); library(data.table); library(ggplot2); library(sf);
library(rsconnect)
#Load files for the app  ************#
#Load MedGermDB Germination File
dat1 <- read.csv("data/GerminationFile.csv")
#Load MedGermDB Taxa File
taxa.file = read.csv("data/TaxaFile.csv",header = TRUE, sep = ";", quote = "\"", stringsAsFactors = FALSE)
#Load MedGermDB Habitat File
habitat.file = read.csv("data/HabitatFile.csv",header = TRUE, sep = ",", quote = "\"", stringsAsFactors = FALSE)
# Load coordinates spacial data frame
#coord_sf <- st_read("data/coord_sf.shp")
coord_sf <- readRDS("data/coord_sf.rds")
# Load Germination grouped data
df <- fread("data/df.csv")
# Load map files
shapefile <- st_read("data/Map files/MedBasin_21-07-23.shp")
world  <- st_read("data/Map files/WorldRectMap.shp")
### A function to metanalize proportions:
metanalize <- function(d)
{
m <- rma.glmm(measure = "PLO", xi = seeds_germinated, ni = seeds_sown, data = d)
p <- predict(m, transf = transf.ilogit, digits = 3)
data.frame(mean = p$pred, lower = p$ci.lb, upper = p$ci.ub)
}
#### First we check for which groups the metanalysis works:
listd <- split(df, by = "group", drop = TRUE)
ms <- lapply(listd, function(d) tryCatch(metanalize(d), error = function(e) e))
rma.works <- names(ms)[lapply(ms, length) >= 3]
#### Now we do the MA for the species that work
df.rma <- df[group %in% rma.works]
df.rma %>%
group_by(group) %>%
do(metanalize(.)) %>%
group_by -> rma.species
#### And for the rest, we simply calculate the proportions and CI
df[! group %in% rma.works] %>%
group_by(group) %>%
summarise(seeds_germinated = sum(seeds_germinated), seeds_sown = sum(seeds_sown)) %>%
data.frame -> GermDF
cbind(group = GermDF[, 1],
binom.confint(GermDF$seeds_germinated, GermDF$seeds_sown, method = "wilson")[, 4:6]) %>%
as_tibble()-> germdf
#### join both groups of dataframes
rbind(germdf, rma.species)  %>%
separate(group, into = c("species", "scarification", "stratification",
"light", "alternating", "temperature"), sep = "_",
convert = TRUE) %>%
mutate(light = ifelse(is.na(light), "Light unknown", light),
species = as.factor(species),
scarification = as.factor(scarification),
stratification = as.factor(stratification),
light = as.factor(light),
alternating = as.factor(alternating),
scarification = recode_factor(scarification, "none" = "Unscarified", "yes" = "Scarified"),
stratification = recode_factor(stratification, "none" = "Non-stratified", "yes" = "Stratified"),
light = recode_factor(light, "0" = "Darkness", "1" = "Light"),
alternating = recode_factor(alternating, "no" = "Constant temperature",
"yes" = "Alternating temperature"),
Experiment = paste(light, alternating, stratification, scarification, sep = ",\n"),
Experiment = as.factor(Experiment)) -> Germination
save(Germination, dat1, shapefile, world,coord_sf,dat1,taxa.file,habitat.file,
file = here::here("results", "appdata.RData"))
runApp('3. appCode.R')
runApp('3. appCode.R')
library(shiny)
library(tidyverse); library(maps); library(here)
# load data for the app
load("results/appdata.RData")
coord_sf <- readRDS("data/coord_sf.rds")
functions <- readRDS("results/functions.rds")
mapplot <- functions$mapplot
seedplot<- functions$seedplot
references <- functions$references
taxanomic <- functions$taxanomic
habitat <- functions$habitat
metanalize <- functions$metanalize
runApp('3. appCode.R')
class(coord_sf)
# load data for the app
load("results/appdata.RData")
coord_sf <- readRDS("data/coord_sf.rds")
functions <- readRDS("results/functions.rds")
mapplot <- functions$mapplot
seedplot <- functions$seedplot
references <- functions$references
taxanomic <- functions$taxanomic
habitat <- functions$habitat
metanalize <- functions$metanalize
#Create the species list
spp <- dat1 %>%
select(accepted_binomial) %>%
arrange(accepted_binomial) %>%
pull(accepted_binomial) %>%
unique %>%
as.character
# UI
ui <- fluidPage(
tags$head(
tags$style(
HTML("
.center-image {
display: flex;
justify-content: center;
align-items: center;
}
.right-title {
text-align: right;
margin-top: 2000px;
}
.app-container {
margin-left: 2000px;
}
")
)
),
# Add logo
fluidRow(
div(
class = "right-image",
tags$img(src = "MedGermDB_LOGOS.png", height = "200px", width = "500px")
)
),
# Add title
fluidRow(
column(
width = 12,
div(
class = "right-title",
titlePanel("a Germination Database for Mediterranean plants", windowTitle = "a Germination Database for Mediterranean plants")
)
)
),
# Sidebar to choose species to display
selectizeInput("spp", label = "Species", choices = spp, selected = spp[1]),
fluidRow(
column(
width = 12,
plotOutput("plot_map", width = "800px", height = "400px")
)
),  # Add your actual figure output here
mainPanel(
plotOutput("plot_germination"), #Mean germination proportions
br(),  # Add a line break to create space between elements
tags$div(
style = "text-align: center; font-size: 16px; font-weight: bold; margin-bottom: 10px;",
"Taxonomic information"
),
tableOutput("taxa"),
tags$div(
style = "text-align: center; font-size: 16px; font-weight: bold; margin-bottom: 10px;",
"EUNIS HABITAT INFORMATION"
),
tableOutput("habitats"),
tableOutput("table"), #To define: 1. References 2.Taxonomic info 3. Number of records
# Add Bookmark Button
bookmarkButton()
)
)
# Server
server <- function(input, output) {
output$plot_map <- renderPlot({
# filter by species
x <- coord_sf %>%
filter(accepted_binomial == input$spp)
# draw the map for the species
mapplot(coord_sf = x)
})
output$plot_germination <- renderPlot({
# filter by species
y <- Germination %>%
filter(species == input$spp)
# draw the germination plot for the species
seedplot(Germination = y)
})
output$taxa <- renderTable({
taxanomic(taxa.file, input$spp)
})
output$habitats <- renderTable({
habitat(habitat.file, input$spp)
})
output$table <- renderTable({
references(dat1, input$spp)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('3. appCode.R')
runApp('3. appCode.R')
library(shiny); library(tidyverse); library(maps); library(here)
# load data for the app
load("results/appdata.RData")
coord_sf <- readRDS("data/coord_sf.rds")
functions <- readRDS("results/functions.rds")
mapplot <- functions$mapplot
seedplot<- functions$seedplot
references <- functions$references
taxanomic <- functions$taxanomic
habitat <- functions$habitat
metanalize <- functions$metanalize
runApp('3. appCode.R')
library(rsconnect)
deployApp()
deployApp()
rlang::last_trace()
rsconnect::appDependencies()
deployApp()
#Map
coord_sf <- readRDS("data/coord_sf.rds")
mapplot <- function(coord_sf) {
ggplot() +
geom_sf(data = world, fill = "gainsboro", color = "darkgray") +
geom_sf(data = shapefile, fill = rgb(0, 1, 0, alpha = 0.1), color ="darkgray")+
geom_sf(data = coord_sf, color = "black", size = 3, alpha = 0.8)+
labs(title = "Origin of the germination records.",
subtitle = "The golden circles are the coordinates of the seed lots used in the experiments")+
theme_minimal() +  # Use theme_minimal as a base theme
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank(),
text = element_text(size = 12),
plot.title = element_text(face = c("bold"), size = 14),
plot.subtitle = element_text(face = c("italic")))
}
#Germination plot
seedplot <- function(Germination) {
ggplot(Germination, aes(x = as.factor(temperature), y = mean, ymin = lower, ymax = upper, fill = Experiment)) +
geom_bar(stat = "identity", alpha = 0.6, show.legend = FALSE) +
geom_errorbar(aes(color = Experiment), width = 0.1, size = 1,
position = position_dodge(.9), show.legend = FALSE) +
coord_cartesian(ylim = c(0, 1)) +
labs(title = "Seed germination tests", subtitle = "Bars are the mean germination proportions,\n brackets the binomial confidence intervals.") +
ylab(label = "Germination proportion") + xlab(label = "Average germination temperature (C)") +
theme(text = element_text(size = 12),
plot.title = element_text(face = c("bold"), size = 14),
plot.subtitle = element_text(face = c("italic"))) +
theme(panel.background = element_blank(),panel.grid.minor = element_line(color = "gainsboro"))+
facet_wrap( ~ Experiment, scales = "free", ncol = 4)
}
#References table
references <- function(df1 = dat1, sp = "Achillea maritima") {
filter(df1, accepted_binomial == sp) %>%
select(doi) %>%
unique %>%
arrange(doi) %>%
rename(Doi = doi) %>%
as_tibble
}
#Taxonomic information
taxanomic <- function(df2 = taxa.file, sp = "Achillea maritima") {
filter(df2,accepted_binomial == sp) %>%
select(EUNIS_name,accepted_binomial, family, order, APG_clade) %>%
as_tibble
}
#Habitat information
habitat <- function(habitat.file, sp = "Achillea maritima") {
filter(habitat.file,accepted_binomial == sp) %>%
select(species_type,Habitat_level.1, Habitat_level.3) %>%
as_tibble
}
#Load packages
library(dplyr); library(sp); library(readr); library(tidyr);library(metafor); library(binom); library(data.table); library(ggplot2); library(sf);
library(rsconnect)
#Load files for the app  ************#
#Load MedGermDB Germination File
dat1 <- read.csv("data/GerminationFile.csv")
#Load MedGermDB Taxa File
taxa.file = read.csv("data/TaxaFile.csv",header = TRUE, sep = ";", quote = "\"", stringsAsFactors = FALSE)
#Load MedGermDB Habitat File
habitat.file = read.csv("data/HabitatFile.csv",header = TRUE, sep = ",", quote = "\"", stringsAsFactors = FALSE)
# Load coordinates spacial data frame
#coord_sf <- st_read("data/coord_sf.shp")
#coord_sf <- readRDS("data/coord_sf.rds")
# Load Germination grouped data
df <- fread("data/df.csv")
# Load map files
shapefile <- st_read("data/Map files/MedBasin_21-07-23.shp")
world  <- st_read("data/Map files/WorldRectMap.shp")
### A function to metanalize proportions:
metanalize <- function(d)
{
m <- rma.glmm(measure = "PLO", xi = seeds_germinated, ni = seeds_sown, data = d)
p <- predict(m, transf = transf.ilogit, digits = 3)
data.frame(mean = p$pred, lower = p$ci.lb, upper = p$ci.ub)
}
#### First we check for which groups the metanalysis works:
listd <- split(df, by = "group", drop = TRUE)
ms <- lapply(listd, function(d) tryCatch(metanalize(d), error = function(e) e))
rma.works <- names(ms)[lapply(ms, length) >= 3]
#### Now we do the MA for the species that work
df.rma <- df[group %in% rma.works]
df.rma %>%
group_by(group) %>%
do(metanalize(.)) %>%
group_by -> rma.species
#### And for the rest, we simply calculate the proportions and CI
df[! group %in% rma.works] %>%
group_by(group) %>%
summarise(seeds_germinated = sum(seeds_germinated), seeds_sown = sum(seeds_sown)) %>%
data.frame -> GermDF
cbind(group = GermDF[, 1],
binom.confint(GermDF$seeds_germinated, GermDF$seeds_sown, method = "wilson")[, 4:6]) %>%
as_tibble()-> germdf
#### join both groups of dataframes
rbind(germdf, rma.species)  %>%
separate(group, into = c("species", "scarification", "stratification",
"light", "alternating", "temperature"), sep = "_",
convert = TRUE) %>%
mutate(light = ifelse(is.na(light), "Light unknown", light),
species = as.factor(species),
scarification = as.factor(scarification),
stratification = as.factor(stratification),
light = as.factor(light),
alternating = as.factor(alternating),
scarification = recode_factor(scarification, "none" = "Unscarified", "yes" = "Scarified"),
stratification = recode_factor(stratification, "none" = "Non-stratified", "yes" = "Stratified"),
light = recode_factor(light, "0" = "Darkness", "1" = "Light"),
alternating = recode_factor(alternating, "no" = "Constant temperature",
"yes" = "Alternating temperature"),
Experiment = paste(light, alternating, stratification, scarification, sep = ",\n"),
Experiment = as.factor(Experiment)) -> Germination
save(Germination, dat1, shapefile, world,coord_sf,dat1,taxa.file,habitat.file,
file = here::here("results", "appdata.RData"))
library(shiny); library(tidyverse); library(maps); library(here)
# load data for the app
load("results/appdata.RData")
coord_sf <- readRDS("data/coord_sf.rds")
functions <- readRDS("results/functions.rds")
mapplot <- functions$mapplot
seedplot<- functions$seedplot
references <- functions$references
taxanomic <- functions$taxanomic
habitat <- functions$habitat
metanalize <- functions$metanalize
#Create the species list
spp <- dat1 %>% select(accepted_binomial) %>% arrange(accepted_binomial) %>% pull(accepted_binomial) %>% unique %>% as.character
runApp('app.R')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
coord_sf <- readRDS("data/coord_sf.rds")
mapplot <- function(coord_sf) {
ggplot() +
geom_sf(data = world, fill = "gainsboro", color = "darkgray") +
geom_sf(data = shapefile, fill = rgb(0, 1, 0, alpha = 0.1), color ="darkgray")+
geom_sf(data = coord_sf, color = "black", size = 3, alpha = 0.8)+
labs(title = "Origin of the germination records.",
subtitle = "The golden circles are the coordinates of the seed lots used in the experiments")+
theme_minimal() +  # Use theme_minimal as a base theme
theme(axis.line=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank(), axis.ticks=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank(),
legend.position="none", panel.background=element_blank(),
panel.border=element_blank(), panel.grid.major=element_blank(),
panel.grid.minor=element_blank(), plot.background=element_blank(),
text = element_text(size = 12),
plot.title = element_text(face = c("bold"), size = 14),
plot.subtitle = element_text(face = c("italic")))
}
library(shiny); library(tidyverse); library(maps); library(here)
# load data for the app
load("results/appdata.RData")
coord_sf <- readRDS("data/coord_sf.rds")
functions <- readRDS("results/functions.rds")
mapplot <- functions$mapplot
seedplot<- functions$seedplot
references <- functions$references
taxanomic <- functions$taxanomic
habitat <- functions$habitat
metanalize <- functions$metanalize
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
